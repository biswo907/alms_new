const PopupModal = ({
  visible,
  navigation,
  onPressNo,
  onRequestClose,
  onPressYes,
}) => {
  return (
    <View >
      <Modal
        visible={visible}
        transparent={true}
        animationType="slide"
        onRequestClose={onRequestClose}
      >
        < View style={styles.overlay}/>

        <View style={styles.modalContainer}>
          <View style={styles.modalText}>
            <Text style={{ textAlign: "center", fontSize: 20 }}>
              Are You sure want to Back ? Your Changes will be Not Reflect In
              Your Account{" "}
            </Text>
          </View>
          <View style={styles.modalbutton}>
            <View></View>
            <TouchableOpacity
              style={[
                styles.button,
                { borderRightWidth: 0.5, borderRightColor: "black" },
              ]}
              onPress={onPressNo}
            >
              <Text style={{ fontSize: 18, top: 10 }}>NO</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.button}
              onPress={onPressYes}
            >
              <Text style={{ fontSize: 18, top: 10 }}>YES</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0, 0, 0, 0.8)', 
  },
  modalContainer: {
    backgroundColor: "white",
    height: "20%",
    top: "32%",
    margin: 10,
    borderTopRightRadius: 20,
    borderTopLeftRadius: 20,
    
  },
  modalText: {
    width: "95%",
    marginLeft: 9,
    margin: 10,
    height: "50%",
    top: 10,
  },
  modalbutton: {
    width: "100%",
    height: "35%",
    borderTopWidth: 0.5,
    borderTopColor: "black",
    alignItems: "center",
    flexDirection: "row",
    justifyContent: "space-between",
  },
  button: {
    width: "50%",
    height: "100%",
    textAlign: "center",
    alignItems: "center",
    fontSize: 18,
  },
});



<TouchableOpacity onPress={() => dispatch(resetAll())}>